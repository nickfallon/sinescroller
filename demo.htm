
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Scroller</title>
    <meta name="viewport" content="user-scalable=no, width=device-width, initial-scale=0.5, minimum-scale=0.5, maximum-scale=0.5" />
    <meta name="apple-mobile-web-app-capable" content="yes" />
    <meta name="apple-mobile-web-app-status-bar-style" content="black" />
    <style type="text/css">
        body {
            padding: 0px;
            margin: 0px;
            overflow: hidden;
            background-color: #000000;
        }
    </style>
    <script type="text/javascript" src="js/mouse.js"></script>

</head>
<body>

    <canvas id="canvas"></canvas>

    <script>

        var canvas;
        var ctx;
        var clock = 0;
        var origin_tx = 0;
        var origin_ty = 0;
        var canvas_width = 0;
        var canvas_height = 0;

        var dt = new DemoText();

        window.onload = function () {
            //setup canvas, camera, world
            canvas = document.getElementById('canvas');
            ctx = canvas.getContext("2d");
            window.onresize = onResizeWindow;
            onResizeWindow();
            //start the loop
            window.requestAnimFrame = (function () {
                return window.requestAnimationFrame ||
                window.webkitRequestAnimationFrame ||
                window.mozRequestAnimationFrame ||
                function (callback) {
                    window.setTimeout(callback, 16); //fallback
                };
            })();
            (function animloop() {
                requestAnimFrame(animloop);
                theloop();
            })();
            //prevent bounce scroll on mobile
            document.ontouchmove = function (e) { e.preventDefault() };
        }

        function theloop(){
            clock++;
            //clear canvas
            ctx.fillStyle = "rgb(0,0,0)";
            ctx.fillRect(0, 0, canvas_width, canvas_height);

            dt.render('abcdefghijklmnopqrstuvwxyzksjdjdhf sdkjfdsfkjd sdkfjdkfdsjhfjsdfhdsjfhdsj hfjsdhfdsjfhdsjvcmnvmxcvm.x,;sjsdughkewjfkmnmcnxzmcnzxmncxzmn  ');
        }

        function onResizeWindow()  {
            //resize canvas to fill document
            canvas_width = document.documentElement.clientWidth;
            canvas_height = document.documentElement.clientHeight;
            canvas.setAttribute("width", canvas_width);
            canvas.setAttribute("height", canvas_height);
            //get screen origin (center)
            origin_tx = Math.floor(canvas_width / 2);
            origin_ty = Math.floor(canvas_height / 2);

        }



        function DemoText() {
            //character set bitmap
            this.image = new Image();
            this.image.src = 'demo.png';
            //number of character columns on bitmap
            this.charCols = 10;
            //width of bitmap
            this.imgwidth = 320;
            //size of single character
            this.charwidth = 32;
            this.charheight = 25;
            this.scale = 3;
            this.sx = 0;
            this.sy = 0;
            this.offset = 0;
            //sine scroll vars
            this.speed = 2.2;
            this.freq = 0.015;
            this.amp = 90;
            this.strips = this.charwidth;
            this.height_y = 400;
        }
        
        DemoText.prototype.render = function (message) {

            for (var i = 0; i < message.length; i++) {
                var char = message.charCodeAt(i) - 97; // +this.offset;

                for (var j = 0; j < this.strips; j++) {

                    //ctx.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);
                    ctx.drawImage(this.image,
                                    (Math.floor(char % this.charCols) * this.charwidth) + ((this.charwidth / this.strips) * j),
                                    Math.floor(char / this.charCols) * this.charheight,
                                    this.charwidth / this.strips,
                                    this.charheight,
                                    (((i * this.charwidth) + ((this.charwidth / this.strips) * j)) * this.scale) - (clock * this.speed),
                                    this.height_y + ((Math.sin(i + (j * 0.03) + clock * this.freq) * this.amp)),
                                    (this.charwidth / this.strips) * this.scale,
                                    this.charheight * this.scale
                                    );


                }

            }


        }





    </script>

</body>
</html>
